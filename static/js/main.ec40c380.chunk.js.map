{"version":3,"sources":["components/Header.jsx","components/TipCalc.jsx","components/App.jsx","index.js"],"names":["Header","Navbar","bg","variant","className","Container","Brand","TipCalc","useState","value","label","tipOptions","setTipOptions","amount","setAmount","tipPercent","setTipPercent","Form","Row","Group","as","Col","md","Label","Control","type","autoFocus","onChange","e","target","options","opt","val","includes","replace","labl","newOpt","parseInt","Button","onClick","Alert","Heading","toFixed","parseFloat","App","ReactDOM","render","document","getElementById"],"mappings":"mLAaeA,EAVA,WACb,OACE,cAACC,EAAA,EAAD,CAAQC,GAAG,OAAOC,QAAQ,OAAOC,UAAU,OAA3C,SACE,cAACC,EAAA,EAAD,UACE,cAACJ,EAAA,EAAOK,MAAR,wB,gECwFOC,EA3FC,WAAO,IAAD,EACgBC,mBAAS,CAC3C,CAAEC,MAAO,GAAIC,MAAO,OACpB,CAAED,MAAO,GAAIC,MAAO,OACpB,CAAED,MAAO,GAAIC,MAAO,OACpB,CAAED,MAAO,GAAIC,MAAO,SALF,mBACbC,EADa,KACDC,EADC,OAOQJ,mBAAS,IAPjB,mBAObK,EAPa,KAOLC,EAPK,OAQgBN,mBAAS,CAAEC,MAAO,GAAIC,MAAO,QAR7C,mBAQbK,EARa,KAQDC,EARC,KAUpB,OACE,eAACX,EAAA,EAAD,WACE,cAACY,EAAA,EAAD,UACE,eAACC,EAAA,EAAD,WACE,eAACD,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,GAAI,EAAzB,UACE,cAACL,EAAA,EAAKM,MAAN,0BACA,cAACN,EAAA,EAAKO,QAAN,CACEC,KAAK,SACLhB,MAAOI,EACPa,WAAS,EACTC,SAAU,SAACC,GAAD,OAAOd,EAAUc,EAAEC,OAAOpB,aAGxC,eAACQ,EAAA,EAAKE,MAAN,CAAYC,GAAIC,IAAKC,GAAI,EAAzB,UACE,cAACL,EAAA,EAAKM,MAAN,oBACA,cAAC,IAAD,CACEO,QAASnB,EACTF,MAAOM,EACPY,SAAU,SAACI,GACT,GAAY,OAARA,EAIJ,GAAI,cAAeA,EAAK,CACtB,IAAMC,EAAMD,EAAItB,MAAMwB,SAAS,KAC3BF,EAAItB,MAAMyB,QAAQ,IAAK,IACvBH,EAAItB,MACF0B,EAAOH,EAAM,IACbI,EAAS,CAAE3B,MAAO4B,SAASL,GAAMtB,MAAOyB,GAE9CvB,EAAc,GAAD,mBAAKD,GAAL,CAAiByB,KAC9BpB,EAAcoB,QAEdpB,EAAce,SAKtB,eAACd,EAAA,EAAKE,MAAN,CACEC,GAAIC,IACJC,GAAI,EACJlB,UAAU,yCAHZ,UAKE,wBACA,cAACa,EAAA,EAAKO,QAAN,CACEJ,GAAIkB,IACJnC,QAAQ,oBACRoC,QAAS,WACPvB,EAAc,CAAEP,MAAO,GAAIC,MAAO,QAClCI,EAAU,KALd,2BAaM,KAAXD,GACC,eAAC2B,EAAA,EAAD,CAAOrC,QAAQ,UAAUC,UAAU,GAAnC,UACE,cAACoC,EAAA,EAAMC,QAAP,CAAerC,UAAU,OAAzB,yBACA,qCACO,IACL,uBAAMA,UAAU,KAAhB,eACKS,GAAUE,EAAWN,MAAQ,MAAMiC,QAAQ,SAGlD,uCACS,IACP,sBAAMtC,UAAU,KAAhB,UAEIuC,WAAW9B,GACX8B,WAAW9B,GAAUE,EAAWN,MAAQ,OACxCiC,QAAQ,eCxETE,EATH,WACV,OACE,qCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCJNC,IAASC,OACP,mCACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ec40c380.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Container, Navbar } from \"react-bootstrap\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <Navbar bg=\"dark\" variant=\"dark\" className=\"mb-3\">\r\n      <Container>\r\n        <Navbar.Brand>Tipr</Navbar.Brand>\r\n      </Container>\r\n    </Navbar>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React, { useState } from \"react\";\r\nimport { Alert, Button, Col, Container, Form, Row } from \"react-bootstrap\";\r\nimport CreatableSelect from \"react-select/creatable\";\r\n\r\nconst TipCalc = () => {\r\n  const [tipOptions, setTipOptions] = useState([\r\n    { value: 15, label: \"15%\" },\r\n    { value: 18, label: \"18%\" },\r\n    { value: 20, label: \"20%\" },\r\n    { value: 22, label: \"22%\" },\r\n  ]);\r\n  const [amount, setAmount] = useState(\"\");\r\n  const [tipPercent, setTipPercent] = useState({ value: 15, label: \"15%\" });\r\n\r\n  return (\r\n    <Container>\r\n      <Form>\r\n        <Row>\r\n          <Form.Group as={Col} md={2}>\r\n            <Form.Label>Bill amount</Form.Label>\r\n            <Form.Control\r\n              type=\"number\"\r\n              value={amount}\r\n              autoFocus\r\n              onChange={(e) => setAmount(e.target.value)}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group as={Col} md={3}>\r\n            <Form.Label>Tip %</Form.Label>\r\n            <CreatableSelect\r\n              options={tipOptions}\r\n              value={tipPercent}\r\n              onChange={(opt) => {\r\n                if (opt === null) {\r\n                  return;\r\n                }\r\n\r\n                if (\"__isNew__\" in opt) {\r\n                  const val = opt.value.includes(\"%\")\r\n                    ? opt.value.replace(\"%\", \"\")\r\n                    : opt.value;\r\n                  const labl = val + \"%\";\r\n                  const newOpt = { value: parseInt(val), label: labl };\r\n\r\n                  setTipOptions([...tipOptions, newOpt]);\r\n                  setTipPercent(newOpt);\r\n                } else {\r\n                  setTipPercent(opt);\r\n                }\r\n              }}\r\n            />\r\n          </Form.Group>\r\n          <Form.Group\r\n            as={Col}\r\n            md={1}\r\n            className=\"d-flex flex-column justify-content-end\"\r\n          >\r\n            <div></div>\r\n            <Form.Control\r\n              as={Button}\r\n              variant=\"outline-secondary\"\r\n              onClick={() => {\r\n                setTipPercent({ value: 15, label: \"15%\" });\r\n                setAmount(\"\");\r\n              }}\r\n            >\r\n              Reset\r\n            </Form.Control>\r\n          </Form.Group>\r\n        </Row>\r\n      </Form>\r\n      {amount !== \"\" && (\r\n        <Alert variant=\"success\" className=\"\">\r\n          <Alert.Heading className=\"mb-2\">Tip amounts</Alert.Heading>\r\n          <p>\r\n            Tip:{\" \"}\r\n            <span className=\"h5\">\r\n              ${(amount * (tipPercent.value / 100)).toFixed(2)}\r\n            </span>\r\n          </p>\r\n          <p>\r\n            Total:{\" \"}\r\n            <span className=\"h5\">\r\n              {(\r\n                parseFloat(amount) +\r\n                parseFloat(amount * (tipPercent.value / 100))\r\n              ).toFixed(2)}\r\n            </span>\r\n          </p>\r\n        </Alert>\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TipCalc;\r\n","import React from \"react\";\r\nimport { Container } from \"react-bootstrap\";\r\nimport Header from \"./Header\";\r\nimport TipCalc from \"./TipCalc\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <>\r\n      <Header />\r\n      <TipCalc />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <>\n    <App />\n  </>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}